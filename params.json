{
  "name": "OpenWRT sftp-bittorrent guide",
  "tagline": "Guide to create an OpenWRT SFTP & BitTorrent server",
  "body": "# OpenWRT SFTP & BitTorrent server\r\nThis guide is intended to walk a user through building a router-based multi-user SFTP & BitTorrent (using [Transmission](http://www.transmissionbt.com/)) server with [OpenWRT](https://openwrt.org/). You should have a working router running OpenWRT (and LuCI) before starting. Upon completion, you will have a router with seedbox capabilities. SFTP users (that you manage) will be able to download files from shared directories without having router shell access.\r\n\r\nDon't need BitTorrent transfers? Skip the Transmission section and transfer local data to the SFTP server via Samba.\r\n\r\n> #### NOTE!\r\n> * This guide assumes you are familiar with command-line terminals and VIM or another command-line text editor\r\n> * Text within brackets such as **_[username]_** are variables to be replaced at your discretion\r\n> * All commands are to be run as the root user (use ``` sudo -i ``` after disabling root SSH access)\r\n\r\n## Prerequisites\r\n### Hardware\r\n* USB storage drive formatted EXT4 **(NTFS-3G is a stable read/write NTFS driver, but is too slow for this implementation)**\r\n* USB swap drive formatted SWAP **(optional)**\r\n\r\n### Software\r\nVia SSH, update OPKG (Open PacKaGe Management).\r\n``` bash\r\nopkg update\r\n```\r\n\r\n## Setup\r\n### Replace Dropbear with OpenSSH\r\nDropbear doesn't work with  openssh-sftp-server, so we will replace it with OpenSSH to create a multi-user SFTP server.\r\n* Via LuCI, change Dropbear port to something other than 22 (I used 44)\r\n* Connect to router via Dropbear SSH on the new port\r\n* Install OpenSSH (and SFTP)\r\n``` bash\r\nopkg install openssh-server openssh-sftp-server\r\n```\r\n* Enable & start OpenSSH\r\n``` bash\r\n/etc/init.d/sshd enable\r\n```\r\n``` bash\r\n/etc/init.d/sshd start\r\n```\r\n* Log out of Dropbear SSH and reconnect with OpenSSH (using port 22 now)\r\n* Stop & disable Dropbear\r\n``` bash\r\n/etc/init.d/dropbear disable\r\n```\r\n``` bash\r\n/etc/init.d/dropbear stop\r\n```\r\n* Via LuCI, delete the Dropbear instance\r\n\r\n### Users and groups\r\n#### Add OpenWRT users\r\n* Install necessary packages to manage users and groups\r\n``` bash\r\nopkg install shadow-useradd shadow-groupadd shadow-userdel shadow-groupdel shadow-groupmod shadow-usermod\r\n```\r\n* Add users, making sure to add a user to be designated as an administrator to use instead of the root user **(repeat for each user)**\r\n``` bash\r\nuseradd [username]\r\n```\r\n* Add home directory\r\n``` bash\r\nmkdir /home\r\n```\r\n* Add user home directories **(repeat for each user)**\r\n``` bash\r\nmkdir /home/[username]\r\n```\r\n* Set user passwords - this is necessary because we won't be giving SFTP users shell access **(repeat for each user)**\r\n``` bash\r\npasswd [username]\r\n```\r\n\r\n#### Configure shell access for new users\r\n* Add shell access for the administrative user created above\r\n``` bash\r\nusermod -s /bin/ash [admin_username]\r\n```\r\n* Disable shell access for the SFTP users created above **(repeat for each user)**\r\n``` bash\r\nusermod -s /bin/false [sftp_username]\r\n```\r\n\r\n#### Create groups to manage access rights\r\n* Create an administrator group (this will be assigned to the administrative user created above)\r\n``` bash\r\ngroupadd [admin_group_name]\r\n```\r\n* Create a SFTP  group (this will be the read-only SFTP-access-only user group)\r\n``` bash\r\ngroupadd [sftp_group_name]\r\n```\r\n\r\n#### Assign groups to users\r\n* Assign administrator group to the administrative user\r\n``` bash\r\nusermod -G [admin_group_name] [admin_username]\r\n```\r\n* Assign SFTP group to SFTP users **(repeat for each user)**\r\n``` bash\r\nusermod -G [sftp_group_name] [sftp_username]\r\n```\r\n\r\n#### Secure SSH access\r\n* Install sudo to allow temporary privileged access\r\n``` bash\r\nopkg install sudo\r\n```\r\n* Edit ``` /etc/sudoers ``` to let any user 'sudo' with root password\r\n``` bash\r\nvisudo\r\n```\r\n  * Uncomment the two lines below\r\n``` bash\r\nDefaults targetpw  # Ask for the password of the target user\r\nALL ALL=(ALL) ALL  # WARNING: only use this together with 'Defaults targetpw'\r\n```\r\n* Save and close ``` /etc/sudoers ```\r\n* Edit SSH configuration file\r\n``` bash\r\nvim /etc/ssh/sshd_config\r\n```\r\n  * Set SSH & SFTP port\r\n``` bash\r\nPort [your_desired_port]\r\n```\r\n  * Disable root SSH access\r\n``` bash\r\nPermitRootLogin no\r\n```\r\n  * Change SFTP server from ``` Subsystem sftp /usr/lib/sftp-server ``` to:\r\n``` bash\r\nSubsystem sftp internal-sftp\r\n```\r\n  * Configure chroot for SFTP group\r\n``` bash\r\nMatch Group [sftp_group_name]\r\n        ForceCommand internal-sftp\r\n        ChrootDirectory %h\r\n        AllowTcpForwarding no\r\n        PermitTunnel no\r\n        X11Forwarding no\r\n        AllowAgentForwarding no\r\n```\r\n* Save and close SSH configuration file\r\n* Restart SSH\r\n``` bash\r\n/etc/init.d/sshd restart\r\n```\r\n\r\n**_At this point you can test SSH and SFTP access for the administrator and other users. Root SSH access is now disabled (use ``` sudo -i ``` as the administrative user to gain sudo privileges) Later on we'll be adding mount points so there's actually a point for SFTP-only users to access the router._**\r\n\r\n### Storage\r\n#### Connect hardware\r\nConnect your EXT4 USB HDD to the router and if applicable, connect your SWAP formatted USB flash drive. The EXT4 HDD will be used as a network drive to store BitTorrent data in addition to Transmission configuration files.\r\n\r\n#### Install necessary packages\r\n* To read/write EXT4 filesystems\r\n``` bash\r\nopkg install kmod-fs-ext4\r\n```\r\n* To manage drives, including SWAP\r\n``` bash\r\nopkg install block-mount\r\n```\r\n\r\n#### Configure fstab\r\n* Pre-fill fstab with necessary device information\r\n``` bash\r\nblock detect > /etc/config/fstab\r\n```\r\n* Edit fstab\r\n``` bash\r\nvim /etc/config/fstab\r\n```\r\n  * Enable network drive HDD and SWAP (add option to both mount configs)\r\n``` bash\r\noption enabled '1'\r\n```\r\n  * Enable read/write for network drive HDD\r\n``` bash\r\noption options 'rw'\r\n```\r\n  * For the network drive HDD, change target to your naming preference\r\n``` bash\r\noption target '/mnt/[network_drive]'\r\n```\r\n* Save and close fstab\r\n\r\n#### Grant users directory access\r\n* Within each SFTP user's home directory at ``` /home/[username] ```, create top-level directories mirroring ``` /mnt/[network_drive]/[shared_directory] ``` **(repeat for each user and shared directory)**\r\n``` bash\r\nmkdir /home/[username]/[shared_directory]\r\n```\r\n* Link ``` /home/[username]/[shared_directory] ``` to ``` /mnt/[network_drive]/[shared_directory] ``` on router startup\r\n  * Edit router startup file\r\n``` bash\r\nvim /etc/rc.local\r\n```\r\n  * Add to ``` /etc/rc.local ``` before the ``` exit 0 ``` line **(repeat for each user and shared directory)**\r\n``` bash\r\n# Mounts network drive for SFTP users (remember to create /home/[username]/[shared_directory] first)\r\nmount --bind /mnt/[network_drive]/[shared_directory]/ /home/[username]/[shared_directory]/\r\n```\r\n* Restart router\r\n\r\n**_At this point users can (locally) login and access directories on the network drive you gave them access to. Permissions will be set in the next section._**\r\n\r\n### Permissions\r\nWe need to ensure permissions are set correctly on the network drive so that the SFTP group cannot write anything to the drive. We should also give the administrator group write access.\r\n* Start by ensuring everything on the drive is initially owned by root\r\n``` bash\r\nchown -R root:root /mnt/[network_drive]\r\nchmod -R 755 /mnt/[network_drive]\r\n```\r\n\r\n**_At this point, the SFTP and administrator groups only have read access to the shared directories._**\r\n\r\n* Assign the network drive to the administrator group\r\n``` bash\r\nchgrp -R [admin_group_name] /mnt/[network_drive]\r\n```\r\n* Grant write access to the administrator group\r\n``` bash\r\nchmod -R 775 /mnt/[network_drive]\r\n```\r\n* Now, we need to ensure the administrator group stays assigned for all new files and directories. We make it 'stick' with the sticky bit.\r\n``` bash\r\nchmod -R g+s /mnt/[network_drive]\r\n```\r\n\r\n**_At this point permissions have been correctly configured. After configuring DDNS, your users will be able to safely access your shared directories._**\r\n\r\n### DDNS\r\nThere are many different DDNS options available. Follow the guide [here](http://wiki.openwrt.org/doc/howto/ddns.client) to choose and configure a DDNS client that best meets your needs.\r\n\r\n> ###### NOTE: Add a firewall exception for SSH/SFTP remote access\r\n> ![Example of firewall exception in /etc/config/firewall](http://i.imgur.com/OqLvVoO.png)\r\n\r\n**_At this point your users will be able to access your shared directories remotely by using your DDNS address and SSH/SFTP port._**\r\n\r\n### Samba (optional)\r\nIf you're on a Windows-based system, you'll want to access your network drive via Windows File Explorer.\r\n* Install Samba\r\n``` bash\r\nopkg install luci-app-samba\r\n```\r\n* Configure Samba through LuCI (settings are pretty self-explanatory)\r\n![Example of LuCI Samba configuration](http://i.imgur.com/uXtFGBP.png)\r\n* Edit ``` /etc/samba/smb.conf.template ```\r\n``` bash\r\nvim /etc/samba/smb.conf.template\r\n```\r\n  * Add the following lines to ``` /etc/samba/smb.conf.template ```\r\n``` bash\r\nforce create mode = 0775\r\nforce directory mode = 0775\r\n```\r\n  * Remove or comment the following line from ``` /etc/samba/smb.conf.template ``` (we will be using root to access the drive via your local network)\r\n``` bash\r\ninvalid users = root\r\n```\r\n* Add Samba user(s) (they must exist in ``` /etc/passwd ``` - I used the root user to keep root ownership of files and directories)\r\n``` bash\r\nsmbpasswd -a [username]\r\n```\r\n> ###### NOTE: The password you set here is different than the SSH/SFTP password set for the user.\r\n\r\n**_At this point you can mount your network drive locally in Windows via the \"Map Network Drive\" feature._**\r\n\r\n### BitTorrent\r\n#### Configure Transmission client\r\n* Install necessary Transmission packages\r\n``` bash\r\nopkg install luci-app-transmission transmission-web\r\n```\r\n* Configure Transmission via LuCI to preferred settings (most will depend on your ISP speed)\r\n  * Point configuration directory to the network drive\r\n``` bash\r\nconfig file directory = /mnt/[network_drive]/transmission\r\n```\r\n  * Set the network drive as the download directory\r\n``` bash\r\ndownload directory = /mnt/[network_drive]/[specific_directory]\r\n```\r\n  * Set umask to 2 (equates to 002) so the correct permissions (775) are set on new files and directories\r\n``` bash\r\numask = 2\r\n```\r\n\r\nMake sure you configure a RPC username and password for Transmission. Once secured, you can disable the RPC whitelist to enable remote Transmission access (you'll still need to configure a firewall exception for Transmission web interface access).\r\n\r\n#### New content permissions\r\nFiles downloaded by Transmission won't mirror the existing file/directory permissions, and Transmission settings don't allow the level of control necessary. To work around this, we create a cron job to update permissions for any new content.\r\n* Add a cron job to OpenWRT via LuCI (System -> Scheduled Tasks)\r\n``` bash\r\n# Runs every 10 minutes to apply permissions and setgid over /mnt/[network_drive]/ (to account for data created by luci-app-transmission)\r\n*/10 * * * * /bin/chmod -R 2775 /mnt/[network_drive]\r\n```\r\n\r\n## Wrap-up\r\nAnd that's all folks. You can view Transmission web interface documentation [here](https://trac.transmissionbt.com/wiki/WebInterface). The number of BitTorrent transfers possible will depend on your specific router and OpenWRT release stability.\r\n\r\nI'll add additional information (and potentially some media of the finished product) in the future. Questions or found a bug? Email me at [me@matthewtraughber.com](mailto:me@matthewtraughber.com) or create an issue or pull request.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}